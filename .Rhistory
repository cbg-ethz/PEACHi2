}
{
pdf(width=9, height=3, "Desktop/bulk_vs_sc_corr.pdf", useDingbats=F)
par(mfrow=c(1,3))
plot_dens_corr_sc_bulk(bk_c_907[,1],as.vector(apply((sc_c_907[,1:24]), 1, mean)), "A_r")
plot_dens_corr_sc_bulk(bk_c_907[,4],as.vector(apply((sc_c_907[,25:48]), 1, mean)), "B_SAHA")
plot_dens_corr_sc_bulk(bk_c_907[,6],as.vector(apply((sc_c_907[,49:72]), 1, mean)), "C_TCR")
dev.off()
}
View(sc_c_907)
plot_dens_corr_sc_bulk(sc_c_907[,11],sc_c_907[,12])
plot_dens_corr_sc_bulk = function (X,Y, xl, yl, p_title = "") {
xx = data.frame(log2(X),log2(Y))
# create density color profile
colors <- densCols(xx)
correlation = cor(log2(X+1),log2(Y+1))
plot(xx, col = colors, pch=20, xlim = c(0,20), ylim = c(0,20),
xlab = xl, ylab = yl, main=p_title)
legend("top", legend = c(paste("r = ", signif(correlation,2),sep="")), bty = "n")
}
plot_dens_corr_sc_bulk(sc_c_907[,11],sc_c_907[,12], "log2(count) 17_1_C49", "log2(count) 17_1_C18")
plot_dens_corr_sc_bulk(sc_c_907[,11],sc_c_907[,12], "log2(count) C49", "log2(count) C18")
plot_dens_corr_sc_bulk(sc_c_907[,11],sc_c_907[,12], "log2(count) C49", "log2(count) C18", "A_r")
plot_dens_corr_sc_bulk(sc_c_907[,16],sc_c_907[,24], "log2(count) C49", "log2(count) C18", "A_r")
plot_dens_corr_sc_bulk(sc_c_907[,(24+13)],sc_c_907[,(24+14)], "log2(count) C02", "log2(count) C65", "B_SAHA")
plot_dens_corr_sc_bulk(sc_c_907[,(24+17)],sc_c_907[,(24+18)], "log2(count) C53", "log2(count) C55", "C_TCR")
pdf(width=9, height=3, "Desktop/sc_vs_sc_corr.pdf", useDingbats=F)
par(mfrow=c(1,3))
plot_dens_corr_sc_bulk(sc_c_907[,11],sc_c_907[,12], "log2(count) C49", "log2(count) C18", "A_r")
plot_dens_corr_sc_bulk(sc_c_907[,(24+13)],sc_c_907[,(24+14)], "log2(count) C02", "log2(count) C65", "B_SAHA")
plot_dens_corr_sc_bulk(sc_c_907[,(24+17)],sc_c_907[,(24+18)], "log2(count) C53", "log2(count) C55", "C_TCR")
dev.off()
library(plyr)
collapse_read_counts = function(file_name) {
sample_table = read.table(file_name, sep="\t", header=TRUE, as.is=TRUE, stringsAsFactors = FALSE)
collapsed_table = ddply(sample_table,~sample_ID,summarise,total_reads=sum(total_reads),trimmed=sum(trimmed_reads),cleaned=sum(cleaned_reads))
return(collapsed_table)
}
collapse_align_counts = function(file_name) {
sample_table = read.table(file_name, sep="\t", header=TRUE, as.is=TRUE, stringsAsFactors = FALSE)
collapsed_table = ddply(sample_table,~sample_ID,summarise,total_to_align=sum(total_input_reads),aligned_unique=sum(uniquely_mapped_reads),multimappers=sum(multimapper_reads),unaligned=sum(unaligned_reads))
return(collapsed_table)
}
collapse_align_ref_counts = function(file_name) {
sample_table = read.table(file_name, sep="\t", header=TRUE, as.is=TRUE, stringsAsFactors = FALSE)
collapsed_table = ddply(sample_table,~sample_ID,summarise,aligned_mitochondrial=sum(mitochondrial_reads),aligned_ercc=sum(ercc_reads),aligned_hiv=sum(hiv_reads))
return(collapsed_table)
}
build_final_table = function(in_tab) {
tab_final = as.data.frame(cbind(in_tab[,1], in_tab[,2], in_tab[,4], in_tab[,6], in_tab[,7],
in_tab[,9], in_tab[,10], in_tab[,11],
in_tab[,6]/in_tab[,4]*100, in_tab[,9]/(in_tab[,6]+in_tab[,7])*100,
in_tab[,10]/(in_tab[,6]+in_tab[,7])*100,in_tab[,11]/(in_tab[,6]+in_tab[,7])*100, in_tab[,7]/in_tab[,4]*100))
colnames(tab_final) = c("sample_ID", "total_reads", "cleaned_reads", "aligned_unique", "multimappers", "Mitochondrial", "ERCC", "HIV",
"aligned_unique (% cleaned)", "Mitochondrial (% aligned)", "ERCC (% aligned)", "HIV (% aligned)", "Multimappers (% cleaned)")
return(tab_final)
}
c906_bulk_c = collapse_read_counts("/Volumes/beerenwinkel/Monica_SC/results/align_param_analysis/C906_bulk_counts.txt")
c907_bulk_c = collapse_read_counts("/Volumes/beerenwinkel/Monica_SC/results/align_param_analysis/C907_bulk_counts.txt")
c908_bulk_c = collapse_read_counts("/Volumes/beerenwinkel/Monica_SC/results/align_param_analysis/C908_bulk_counts.txt")
c906_sc_c = collapse_read_counts("/Volumes/beerenwinkel/Monica_SC/results/align_param_analysis/C906_sc_counts.txt")
c907_sc_c = collapse_read_counts("/Volumes/beerenwinkel/Monica_SC/results/align_param_analysis/C907_sc_counts.txt")
c908_sc_c = collapse_read_counts("/Volumes/beerenwinkel/Monica_SC/results/align_param_analysis/C908_sc_counts.txt")
c906_bulk_a_c = collapse_align_counts("/Volumes/beerenwinkel/Monica_SC/results/align_stats/C906_bulk_align_info.txt")
c907_bulk_a_c = collapse_align_counts("/Volumes/beerenwinkel/Monica_SC/results/align_stats/C907_bulk_align_info.txt")
c908_bulk_a_c = collapse_align_counts("/Volumes/beerenwinkel/Monica_SC/results/align_stats/C908_bulk_align_info.txt")
c906_sc_a_c = collapse_align_counts("/Volumes/beerenwinkel/Monica_SC/results/align_stats/C906_sc_align_info.txt")
c907_sc_a_c = collapse_align_counts("/Volumes/beerenwinkel/Monica_SC/results/align_stats/C907_sc_align_info.txt")
c908_sc_a_c = collapse_align_counts("/Volumes/beerenwinkel/Monica_SC/results/align_stats/C908_sc_align_info.txt")
c906_bulk_a_r_c = collapse_align_ref_counts("/Volumes/beerenwinkel/Monica_SC/results/align_stats/C906_bulk_align_ref_info.txt")
c907_bulk_a_r_c = collapse_align_ref_counts("/Volumes/beerenwinkel/Monica_SC/results/align_stats/C907_bulk_align_ref_info.txt")
c908_bulk_a_r_c = collapse_align_ref_counts("/Volumes/beerenwinkel/Monica_SC/results/align_stats/C908_bulk_align_ref_info.txt")
c906_sc_a_r_c = collapse_align_ref_counts("/Volumes/beerenwinkel/Monica_SC/results/align_stats/C906_sc_align_ref_info.txt")
c907_sc_a_r_c = collapse_align_ref_counts("/Volumes/beerenwinkel/Monica_SC/results/align_stats/C907_sc_align_ref_info.txt")
c908_sc_a_r_c = collapse_align_ref_counts("/Volumes/beerenwinkel/Monica_SC/results/align_stats/C908_sc_align_ref_info.txt")
c906_bulk = merge(c906_bulk_c, merge(c906_bulk_a_c, c906_bulk_a_r_c, by = "sample_ID"), by = "sample_ID")
c907_bulk = merge(c907_bulk_c, merge(c907_bulk_a_c, c907_bulk_a_r_c, by = "sample_ID"), by = "sample_ID")
c908_bulk = merge(c908_bulk_c, merge(c908_bulk_a_c, c908_bulk_a_r_c, by = "sample_ID"), by = "sample_ID")
c906_sc = merge(c906_sc_c, merge(c906_sc_a_c, c906_sc_a_r_c, by = "sample_ID"), by = "sample_ID")
c907_sc = merge(c907_sc_c, merge(c907_sc_a_c, c907_sc_a_r_c, by = "sample_ID"), by = "sample_ID")
c908_sc = merge(c908_sc_c, merge(c908_sc_a_c, c908_sc_a_r_c, by = "sample_ID"), by = "sample_ID")
c906_bulk_final = build_final_table(c906_bulk)
c907_bulk_final = build_final_table(c907_bulk)
c908_bulk_final = build_final_table(c908_bulk)
c906_sc_final = build_final_table(c906_sc)
c907_sc_final = build_final_table(c907_sc)
c908_sc_final = build_final_table(c908_sc)
View(`c908_bulk_final`)
View(`c908_sc_final`)
View(`c907_sc_final`)
View(`c906_sc_final`)
data_tab = rbind(c906_sc_final[,c(1,2,9,10)],c907_sc_final[,c(1,2,9,10)],c908_sc_final[,c(1,2,9,10)])
View(data_tab)
strsplit("2_1_w","_")
labels = apply(data_tab[,1], function(x) strsplit(x,"_")[2])
labels = apply(data_tab[,1], function(x) return(strsplit(x,"_")[2]))
labels = apply(data_tab[,1], 1, function(x) return(strsplit(x,"_")[2]))
labels = apply(data_tab[,1], 1, function(x) strsplit(x,"_")[2])
data_tab[,1]
labels = apply(data_tab[,1], 1, function(x) strsplit(unlist(x),"_")[2])
strsplit("2_1_w","_")[1]
strsplit("2_1_w","_")[[1]]
strsplit("2_1_w","_")[[1]][1]
strsplit("2_1_w","_")[[1]][2]
labels = apply(data_tab[,1], 1, function(x) strsplit(unlist(x),"_")[[1]][2])
unlist
unlist(strsplit("2_1_w","_"))[2]
labels = apply(data_tab[,1], 1, function(x) unlist(strsplit(x,"_"))[2])
View(data_tab)
apply(data_tab[,1], 1, function(x) print(x))
typeof(data_tab[,1])
(data_tab[,1])
strsplit(data_tab[1,1],"")
strsplit(data_tab[1,1],"_")
strsplit(unlist(data_tab[1,1]),"_")
strsplit(toString(data_tab[1,1]),"_")
apply(data_tab[,1], 1, function(x) print(toString(x)))
apply(as.vector(data_tab[,1]), 1, function(x) print(toString(x)))
as.vector(data_tab[,1])
sapply(as.vector(data_tab[,1]), function(x) print(toString(x)))
sapply(as.vector(data_tab[,1]), function(x) print(x))
sapply(as.vector(data_tab[,1]), function(x) print(unlist(x)))
sapply(as.vector(data_tab[,1]), function(x) print(strsplit(x,"_")[2]))
sapply(as.vector(data_tab[,1]), function(x) print(strsplit(x,"_")))
sapply(as.vector(data_tab[,1]), function(x) print(strsplit(x,"_")[2]))
sapply(as.vector(data_tab[,1]), function(x) print(unlist(strsplit(x,"_"))[2]))
labels = as.vector(sapply(as.vector(data_tab[,1]), function(x) print(unlist(strsplit(x,"_"))[2])))
labels = as.vector(sapply(as.vector(data_tab[,1]), function(x) unlist(strsplit(x,"_"))[2]))
labels
labeled_data = cbind(data_tab,t(labels))
View(labeled_data)
t(labels)
labeled_data = cbind(data_tab,(labels))
View(labeled_data)
pca = prcomp(t(data_tab[,2:4]), center=TRUE)
View(data_tab)
pca = prcomp(t(as.numeric(data_tab[,2:4])), center=TRUE)
as.numeric(data_tab[,2:4])
as.numeric(unlist(data_tab[,2:4]))
as.numeric((data_tab[,2:4]))
View(data_tab)
data_tab = as.data.frame(rbind(c906_sc_final[,c(1,2,9,10)],c907_sc_final[,c(1,2,9,10)],c908_sc_final[,c(1,2,9,10)]),stringsAsFactors = FALSE)
View(data_tab)
pca = prcomp(t(as.numeric(data_tab[,2:4])), center=TRUE)
as.numeric(data_tab[,2:4])
data.matrix(data_tab[,2:4])
a=data.matrix(data_tab[,2:4])
View(a)
a = apply(data_tab[,2:4],c(1,2),function(x) as.numeric(x))
View(a)
pca = prcomp(t(a), center=TRUE)
plot(pca$x[,1],pca$x[,2], col=cc, pch=20)
plot(pca$x[,1],pca$x[,2], pch=20)
pca = prcomp(a, center=TRUE)
plot(pca$x[,1],pca$x[,2], pch=20)
pca
pca$x
unique(labels)
col_ass = rbind(unique(labels), c("red","green","blue","grey","cyan","magenta","yellow","darkred","cornflowerblue"))
col_ass = rbind(c(unique(labels)), c("red","green","blue","grey","cyan","magenta","yellow","darkred","cornflowerblue"))
cols = c("red","green","blue","grey","cyan","magenta","yellow","darkred","cornflowerblue")
labs = c(unique(labels))
col_ass = rbind(c(unique(labels)), c("red","green","blue","grey","cyan","magenta","darkred","cornflowerblue"))
col_ass
col_ass = cbind(c(unique(labels)), c("red","green","blue","grey","cyan","magenta","darkred","cornflowerblue"))
col_ass
row.names(col_ass) = col_ass[,1]
col_ass = col_ass[,-1]
col_ass = as.data.frame(cbind(c(unique(labels)), c("red","green","blue","grey","cyan","magenta","darkred","cornflowerblue")))
row.names(col_ass) = col_ass[,1]
View(col_ass)
col_ass = col_ass[,-1]
col_ass
col_ass = as.data.frame(cbind(c(unique(labels)), c("red","green","blue","grey","cyan","magenta","darkred","cornflowerblue")))
row.names(col_ass) = col_ass[,1]
View(col_ass)
apply(1:336, function(x) col_ass(x))
apply(1:336, function(x) col_ass[x,2])
sapply(1:336, function(x) col_ass[x,2])
sapply(1:336, function(x) col_ass[row.names(col_ass)==x,2])
sapply(1:336, function(x) col_ass[row.names(col_ass)==data_tab[x,1],2])
sapply(1:336, function(x) col_ass[row.names(col_ass)==labeled_data[x,4],2])
View(labeled_data)
sapply(1:336, function(x) col_ass[row.names(col_ass)==labeled_data[x,5],2])
apply(1:336, function(x) col_ass[row.names(col_ass)==labeled_data[x,5],2])
apply(1:336, 1,function(x) col_ass[row.names(col_ass)==labeled_data[x,5],2])
sapply(1:336,function(x) col_ass[row.names(col_ass)==labeled_data[x,5],2])
1"336"
1:336
sapply(1:336,function(x) col_ass[row.names(col_ass)==labeled_data[x,5],2])
plot(pca$x[,1],pca$x[,2],color = sapply(1:336,function(x) col_ass[row.names(col_ass)==labeled_data[x,5],2]) pch=20)
cc = sapply(1:336,function(x) col_ass[row.names(col_ass)==labeled_data[x,5],2])
plot(pca$x[,1],pca$x[,2],col = cc, pch=20)
col_ass
View(labeled_data)
cc = sapply(1:336,function(x) col_ass[which(row.names(col_ass)==labeled_data[x,5]),2])
plot(pca$x[,1],pca$x[,2],col = cc, pch=20)
plot(pca$x[,1],pca$x[,2],col = cc, pch=20)
col_ass = as.data.frame(cbind(c(unique(labels)), c("grey","green","blue","red","cyan","magenta","darkred","cornflowerblue")))
cc = sapply(1:336,function(x) col_ass[which(row.names(col_ass)==labeled_data[x,5]),2])
plot(pca$x[,1],pca$x[,2],col = cc, pch=20)
warnings()
col_ass = as.data.frame(cbind(c(unique(labels)), c("yellow","green","blue","red","cyan","magenta","darkred","cornflowerblue")))
cc = sapply(1:336,function(x) col_ass[which(row.names(col_ass)==labeled_data[x,5]),2])
plot(pca$x[,1],pca$x[,2],col = cc, pch=20)
View(col_ass)
row.names(col_ass) = col_ass[,1]
cc = sapply(1:336,function(x) col_ass[which(row.names(col_ass)==labeled_data[x,5]),2])
plot(pca$x[,1],pca$x[,2],col = cc, pch=20)
col_ass
col_ass = as.data.frame(cbind(c(unique(labels)), c("yellow","green","blue","red","cyan","magenta","gold","bisque")))
row.names(col_ass) = col_ass[,1]
cc = sapply(1:336,function(x) col_ass[which(row.names(col_ass)==labeled_data[x,5]),2])
cc = sapply(1:336,function(x) print(col_ass[which(row.names(col_ass)==labeled_data[x,5]),2]))
cc
unlist(cc)
as.vector(cc)
plot(pca$x[,1],pca$x[,2],col = as.vector(cc), pch=20)
col_ass = as.data.frame(cbind(c(unique(labels)), c("green","yellow","blue","red","cyan","magenta","gold","bisque")))
row.names(col_ass) = col_ass[,1]
cc = sapply(1:336,function(x) print(col_ass[which(row.names(col_ass)==labeled_data[x,5]),2]))
plot(pca$x[,1],pca$x[,2],col = as.vector(cc), pch=20)
col_ass
col_ass = as.data.frame(cbind(c(unique(labels)), c("green","grey","blue","red","cyan","magenta","gold","black")))
row.names(col_ass) = col_ass[,1]
cc = sapply(1:336,function(x) print(col_ass[which(row.names(col_ass)==labeled_data[x,5]),2]))
cc = sapply(1:336,function(x) (col_ass[which(row.names(col_ass)==labeled_data[x,5]),2]))
plot(pca$x[,1],pca$x[,2],col = as.vector(cc), pch=20)
col_ass
col_ass = as.data.frame(cbind(c(unique(labels)), c("darkorchid","grey","blue","red","darkorange","magenta","gold","black")))
row.names(col_ass) = col_ass[,1]
cc = sapply(1:336,function(x) (col_ass[which(row.names(col_ass)==labeled_data[x,5]),2]))
plot(pca$x[,1],pca$x[,2],col = as.vector(cc), pch=20)
col_ass = as.data.frame(cbind(c(unique(labels)), c("darkorchid","grey","darkorange","red","blue","magenta","gold","black")))
row.names(col_ass) = col_ass[,1]
cc=rainbow(ncol(counts_table_final), alpha = 1)
cc = sapply(1:336,function(x) (col_ass[which(row.names(col_ass)==labeled_data[x,5]),2]))
plot(pca$x[,1],pca$x[,2],col = as.vector(cc), pch=20)
col_ass = as.data.frame(cbind(c(unique(labels)), c("darkorchid","grey","darkorange","forestgreen","blue","magenta","gold","black")))
row.names(col_ass) = col_ass[,1]
cc=rainbow(ncol(counts_table_final), alpha = 1)
cc = sapply(1:336,function(x) (col_ass[which(row.names(col_ass)==labeled_data[x,5]),2]))
plot(pca$x[,1],pca$x[,2],col = as.vector(cc), pch=20)
legend("bottomright", fill=cc, legend = rownames(col_ass), border = FALSE, cex = 0.5)
cc
legend("bottomright", fill=col_ass[,2], legend = rownames(col_ass), border = FALSE, cex = 0.5)
col_ass
legend("bottomright", fill=col_ass[,2], legend = col_ass[,1], border = FALSE, cex = 0.5)
col_ass[,2]
as.vector(col_ass[,2])
legend("bottomright", fill=as.vector(col_ass[,2]), legend = col_ass[,1], border = FALSE, cex = 0.5)
install.packages('randomForest')
library(randomForest)
View(data_tab)
View(labeled_data)
colnames(labeled_data) = c("sample_ID",  "total_reads",	"aligned_unique",	"Mitochondrial", "labels")
View(labeled_data)
fit <- randomForest(as.factor(labels) ~ total_reads + aligned_unique + Mitochondrial,
data=labeled_data,
importance=TRUE,
ntree=2000)
as.factor(labels)
total_reads
colnames(labeled_data) = c("sample_ID",  "total_reads",	"aligned_unique",	"Mitochondrial", "Labels")
fit <- randomForest(as.factor(Labels) ~ total_reads + aligned_unique + Mitochondrial,
data=labeled_data,
importance=TRUE,
ntree=2000)
as.factor(Labels)
View(labeled_data)
typeof(labeled_data)
typeof(labeled_data[,1])
typeof(labeled_data[,2])
typeof(labeled_data[,3])
typeof(labeled_data[,4])
typeof(labeled_data[,5])
fit <- randomForest(as.factor(Labels) ~ total_reads + aligned_unique + Mitochondrial,
data=labeled_data[,2:5],
importance=TRUE,
ntree=2000)
a = as.data.frame(labeled_data[,2:5])
a
View(a)
fit <- randomForest(as.factor(Labels) ~ total_reads + aligned_unique + Mitochondrial,
data=as.data.frame(labeled_data[,2:5]),
importance=TRUE,
ntree=2000)
str(a)
droplevels.data.frame(a)
a = droplevels.data.frame(a)
View(a)
str(a)
options(stringsAsFactors = FALSE)
str(a)
bob <- data.frame(lapply(labeled_data, as.character), stringsAsFactors=FALSE)
View(bob)
str(bob)
bob <- data.frame(lapply(labeled_data[,2:5], as.character), stringsAsFactors=FALSE)
View(bob)
colnames(bob) = c( "total_reads",	"aligned_unique",	"Mitochondrial", "Labels")
fit <- randomForest(as.factor(Labels) ~ total_reads + aligned_unique + Mitochondrial,
data=bob,
importance=TRUE,
ntree=2000)
varImpPlot(fit)
Prediction <- predict(fit, bob[,1:3])
Prediction
tt=cbind(bob,Prediction)
View(tt)
train_sample = runif(n = 300,min = 1,max = 336)
train_sample = nunif(n = 300,min = 1,max = 336)
train_sample = sample(1:336,size = 300, replace=FALSE)
test_sample = setdiff(1:336,train_sample)
bob <- data.frame(lapply(labeled_data[train_sample,2:5], as.character), stringsAsFactors=FALSE)
colnames(bob) = c( "total_reads",	"aligned_unique",	"Mitochondrial", "Labels")
fit <- randomForest(as.factor(Labels) ~ total_reads + aligned_unique + Mitochondrial,
data=bob,
importance=TRUE,
ntree=2000)
test_bob = bob <- data.frame(lapply(labeled_data[test_sample,2:5], as.character), stringsAsFactors=FALSE)
Prediction <- predict(fit, test_bob[,1:3])
Prediction
v_bob = cbind(test_bob,Prediction)
View(v_bob)
all_bob <- data.frame(lapply(labeled_data[,2:5], as.character), stringsAsFactors=FALSE)
Prediction = <- predict(fit, all_bob[,1:3])
Prediction <- predict(fit, all_bob[,1:3])
v_f_bob = cbind(all_bob,Prediction)
View(v_f_bob)
View(v_f_bob)
View(v_f_bob)
pca = prcomp(v_f_bob[1:3], center=TRUE)
View(v_f_bob)
nna = apply(v_f_bob[1:3],c(1,2),function(x) as.numeric(x))
pca = prcomp(nna, center=TRUE)
plot(pca$x[,1],pca$x[,2],col = as.vector(cc), pch=20)
legend("bottomright", fill=col_ass[,2], legend = col_ass[,1], border = FALSE, cex = 0.5)
legend("bottomright", fill=as.vector(col_ass[,2]), legend = col_ass[,1], border = FALSE, cex = 0.5)
pca = prcomp(nna, center=TRUE)
plot(pca$x[,1],pca$x[,2],col = as.vector(cc), pch=20)
View(v_f_bob)
cc = sapply(1:336,function(x) (col_ass[which(row.names(col_ass)==v_f_bob[x,5]),2]))
nna = apply(v_f_bob[1:3],c(1,2),function(x) as.numeric(x))
pca = prcomp(nna, center=TRUE)
plot(pca$x[,1],pca$x[,2],col = as.vector(cc), pch=20)
legend("bottomright", fill=as.vector(col_ass[,2]), legend = col_ass[,1], border = FALSE, cex = 0.5)
pca = prcomp(nna, center=TRUE, scale. = TRUE)
plot(pca$x[,1],pca$x[,2],col = as.vector(cc), pch=20)
View(data_tab)
cc = sapply(1:336,function(x) (col_ass[which(row.names(col_ass)==labeled_data[x,5]),2]))
nna = apply(data_tab[2:4],c(1,2),function(x) as.numeric(x))
pca = prcomp(nna, center=TRUE)
pca = prcomp(nna, center=TRUE, scale.=TRUE)
plot(pca$x[,1],pca$x[,2],col = as.vector(cc), pch=20)
legend("topright", fill=col_ass[,2], legend = col_ass[,1], border = FALSE, cex = 0.5)
legend("topright", fill=as.vector(col_ass[,2]), legend = col_ass[,1], border = FALSE, cex = 0.5)
plot(pca$x[,1],pca$x[,2],col = as.vector(cc), pch=20, cex=1.5)
plot(pca$x[,1],pca$x[,2],col = as.vector(cc), pch=20, cex=1.5, cex.lab=1.5)
plot(pca$x[,1],pca$x[,2],col = as.vector(cc), pch=20, cex=1.5, cex.lab=1.2)
pca$x
pca$x[,1:10,1]
pca$x[1:10,1]
pca$x[1:10,]
pca$sdev
pca
summary(pca)
plot(pca$x[,1],pca$x[,2],col = as.vector(cc), pch=20, cex=1.5, cex.lab=1.2, xlab = "PC1 (63.35%)", ylab= "PC2 (25.45%)")
legend("topright", fill=as.vector(col_ass[,2]), legend = col_ass[,1], border = FALSE, cex = 0.5)
legend("topright", fill=as.vector(col_ass[,2]), legend = col_ass[,1], border = FALSE, cex = 1)
legend("topright", fill=as.vector(col_ass[,2]), legend = col_ass[,1], border = FALSE, cex = 0.7)
plot(pca$x[,1],pca$x[,2],col = as.vector(cc), pch=20, cex=1.5, cex.lab=1.2, xlab = "PC1 (63.35%)", ylab= "PC2 (25.45%)")
legend("topright", fill=as.vector(col_ass[,2]), legend = col_ass[,1], border = FALSE, cex = 0.6)
nna = apply(v_f_bob[1:3],c(1,2),function(x) as.numeric(x))
pca = prcomp(nna, center=TRUE, scale. = TRUE)
plot(pca$x[,1],pca$x[,2],col = as.vector(cc), pch=20, cex=1.5, cex.lab=1.2, xlab = "PC1 (63.35%)", ylab= "PC2 (25.45%)")
legend("topright", fill=as.vector(col_ass[,2]), legend = col_ass[,1], border = FALSE, cex = 0.6)
nna = apply(v_f_bob[1:3],c(1,2),function(x) as.numeric(x))
pca = prcomp(nna, center=TRUE, scale. = TRUE)
plot(pca$x[,1],pca$x[,2],col = as.vector(cc), pch=20, cex=1.5, cex.lab=1.2, xlab = "PC1 (63.35%)", ylab= "PC2 (25.45%)")
nna = apply(data_tab[2:4],c(1,2),function(x) as.numeric(x))
pca = prcomp(nna, center=TRUE, scale.=TRUE)
plot(pca$x[,1],pca$x[,2],col = as.vector(cc), pch=20, cex=1.5, cex.lab=1.2, xlab = "PC1 (63.35%)", ylab= "PC2 (25.45%)")
legend("topright", fill=as.vector(col_ass[,2]), legend = col_ass[,1], border = FALSE, cex = 0.6)
nna = apply(v_f_bob[1:3],c(1,2),function(x) as.numeric(x))
pca = prcomp(nna, center=TRUE, scale. = TRUE)
plot(pca$x[,1],pca$x[,2],col = as.vector(cc), pch=20, cex=1.5, cex.lab=1.2, xlab = "PC1 (63.35%)", ylab= "PC2 (25.45%)")
data_tab = as.data.frame(rbind(c906_sc_final[,c(1,2,9,10)],c907_sc_final[,c(1,2,9,10)],c908_sc_final[,c(1,2,9,10)]),stringsAsFactors = FALSE)
labels = as.vector(sapply(as.vector(data_tab[,1]), function(x) unlist(strsplit(x,"_"))[2]))
labeled_data = cbind(data_tab,(labels))
col_ass = as.data.frame(cbind(c(unique(labels)), c("darkorchid","grey","darkorange","forestgreen","blue","magenta","gold","black")))
row.names(col_ass) = col_ass[,1]
cc = sapply(1:336,function(x) (col_ass[which(row.names(col_ass)==labeled_data[x,5]),2]))
nna1 = apply(data_tab[2:4],c(1,2),function(x) as.numeric(x))
pca1 = prcomp(nna1, center=TRUE, scale.=TRUE)
plot(pca1$x[,1],pca1$x[,2],col = as.vector(cc), pch=20, cex=1.5, cex.lab=1.2, xlab = "PC1 (63.35%)", ylab= "PC2 (25.45%)")
legend("topright", fill=as.vector(col_ass[,2]), legend = col_ass[,1], border = FALSE, cex = 0.6)
train_sample = sample(1:336,size = 300, replace=FALSE)
test_sample = setdiff(1:336,train_sample)
bob <- data.frame(lapply(labeled_data[train_sample,2:5], as.character), stringsAsFactors=FALSE)
colnames(bob) = c( "total_reads",	"aligned_unique",	"Mitochondrial", "Labels")
fit <- randomForest(as.factor(Labels) ~ total_reads + aligned_unique + Mitochondrial,
data=bob,
importance=TRUE,
ntree=2000)
test_bob = bob <- data.frame(lapply(labeled_data[test_sample,2:5], as.character), stringsAsFactors=FALSE)
Prediction <- predict(fit, test_bob[,1:3])
v_bob = cbind(test_bob,Prediction)
all_bob <- data.frame(lapply(labeled_data[,2:5], as.character), stringsAsFactors=FALSE)
Prediction <- predict(fit, all_bob[,1:3])
v_f_bob = cbind(all_bob,Prediction)
cc = sapply(1:336,function(x) (col_ass[which(row.names(col_ass)==v_f_bob[x,5]),2]))
nna2 = apply(v_f_bob[1:3],c(1,2),function(x) as.numeric(x))
pca2 = prcomp(nna2, center=TRUE, scale. = TRUE)
plot(pca2$x[,1],pca2$x[,2],col = as.vector(cc), pch=20, cex=1.5, cex.lab=1.2, xlab = "PC1 (63.35%)", ylab= "PC2 (25.45%)")
legend("topright", fill=as.vector(col_ass[,2]), legend = col_ass[,1], border = FALSE, cex = 0.6)
nna1 = apply(data_tab[2:4],c(1,2),function(x) as.numeric(x))
pca1 = prcomp(nna1, center=TRUE, scale.=TRUE)
pdf(width=5, height=5, "Desktop/PCA1.pdf", useDingbats=F)
plot(pca1$x[,1],pca1$x[,2],col = as.vector(cc), pch=20, cex=1.5, cex.lab=1.2, xlab = "PC1 (63.35%)", ylab= "PC2 (25.45%)")
legend("topright", fill=as.vector(col_ass[,2]), legend = col_ass[,1], border = FALSE, cex = 0.6)
dev.off()
nna2 = apply(v_f_bob[1:3],c(1,2),function(x) as.numeric(x))
pca2 = prcomp(nna2, center=TRUE, scale. = TRUE)
pdf(width=5, height=5, "Desktop/PCA2.pdf", useDingbats=F)
plot(pca2$x[,1],pca2$x[,2],col = as.vector(cc), pch=20, cex=1.5, cex.lab=1.2, xlab = "PC1 (63.35%)", ylab= "PC2 (25.45%)")
legend("topright", fill=as.vector(col_ass[,2]), legend = col_ass[,1], border = FALSE, cex = 0.6)
dev.off()
data_tab = as.data.frame(rbind(c906_sc_final[,c(1,2,9,10)],c907_sc_final[,c(1,2,9,10)],c908_sc_final[,c(1,2,9,10)]),stringsAsFactors = FALSE)
labels = as.vector(sapply(as.vector(data_tab[,1]), function(x) unlist(strsplit(x,"_"))[2]))
labeled_data = cbind(data_tab,(labels))
col_ass = as.data.frame(cbind(c(unique(labels)), c("darkorchid","grey","darkorange","forestgreen","blue","magenta","gold","black")))
row.names(col_ass) = col_ass[,1]
cc = sapply(1:336,function(x) (col_ass[which(row.names(col_ass)==labeled_data[x,5]),2]))
nna1 = apply(data_tab[2:4],c(1,2),function(x) as.numeric(x))
pca1 = prcomp(nna1, center=TRUE, scale.=TRUE)
pdf(width=5, height=5, "Desktop/PCA1.pdf", useDingbats=F)
plot(pca1$x[,1],pca1$x[,2],col = as.vector(cc), pch=20, cex=1.5, cex.lab=1.2, xlab = "PC1 (63.35%)", ylab= "PC2 (25.45%)")
legend("topright", fill=as.vector(col_ass[,2]), legend = col_ass[,1], border = FALSE, cex = 0.6)
dev.off()
train_sample = sample(1:336,size = 300, replace=FALSE)
test_sample = setdiff(1:336,train_sample)
bob <- data.frame(lapply(labeled_data[train_sample,2:5], as.character), stringsAsFactors=FALSE)
colnames(bob) = c( "total_reads",	"aligned_unique",	"Mitochondrial", "Labels")
fit <- randomForest(as.factor(Labels) ~ total_reads + aligned_unique + Mitochondrial,
data=bob,
importance=TRUE,
ntree=2000)
test_bob = bob <- data.frame(lapply(labeled_data[test_sample,2:5], as.character), stringsAsFactors=FALSE)
Prediction <- predict(fit, test_bob[,1:3])
v_bob = cbind(test_bob,Prediction)
all_bob <- data.frame(lapply(labeled_data[,2:5], as.character), stringsAsFactors=FALSE)
Prediction <- predict(fit, all_bob[,1:3])
v_f_bob = cbind(all_bob,Prediction)
cc = sapply(1:336,function(x) (col_ass[which(row.names(col_ass)==v_f_bob[x,5]),2]))
nna2 = apply(v_f_bob[1:3],c(1,2),function(x) as.numeric(x))
pca2 = prcomp(nna2, center=TRUE, scale. = TRUE)
pdf(width=5, height=5, "Desktop/PCA2.pdf", useDingbats=F)
plot(pca2$x[,1],pca2$x[,2],col = as.vector(cc), pch=20, cex=1.5, cex.lab=1.2, xlab = "PC1 (63.35%)", ylab= "PC2 (25.45%)")
legend("topright", fill=as.vector(col_ass[,2]), legend = col_ass[,1], border = FALSE, cex = 0.6)
dev.off()
data_tab = as.data.frame(rbind(c906_sc_final[,c(1,2,9,10)],c907_sc_final[,c(1,2,9,10)],c908_sc_final[,c(1,2,9,10)]),stringsAsFactors = FALSE)
labels = as.vector(sapply(as.vector(data_tab[,1]), function(x) unlist(strsplit(x,"_"))[2]))
labeled_data = cbind(data_tab,(labels))
col_ass = as.data.frame(cbind(c(unique(labels)), c("darkorchid","grey","darkorange","forestgreen","blue","magenta","gold","black")))
row.names(col_ass) = col_ass[,1]
cc = sapply(1:336,function(x) (col_ass[which(row.names(col_ass)==labeled_data[x,5]),2]))
nna1 = apply(data_tab[2:4],c(1,2),function(x) as.numeric(x))
pca1 = prcomp(nna1, center=TRUE, scale.=TRUE)
pdf(width=5, height=5, "Desktop/PCA1.pdf", useDingbats=F)
plot(pca1$x[,1],pca1$x[,2],col = as.vector(cc), pch=20, cex=1.5, cex.lab=1.2, xlab = "PC1 (63.35%)", ylab= "PC2 (25.45%)")
legend("topright", fill=as.vector(col_ass[,2]), legend = col_ass[,1], border = FALSE, cex = 0.6)
dev.off()
train_sample = sample(1:336,size = 300, replace=FALSE)
test_sample = setdiff(1:336,train_sample)
bob <- data.frame(lapply(labeled_data[train_sample,2:5], as.character), stringsAsFactors=FALSE)
colnames(bob) = c( "total_reads",	"aligned_unique",	"Mitochondrial", "Labels")
fit <- randomForest(as.factor(Labels) ~ total_reads + aligned_unique + Mitochondrial,
data=bob,
importance=TRUE,
ntree=2000)
test_bob = bob <- data.frame(lapply(labeled_data[test_sample,2:5], as.character), stringsAsFactors=FALSE)
Prediction <- predict(fit, test_bob[,1:3])
v_bob = cbind(test_bob,Prediction)
View(test_bob)
test_bob <- data.frame(lapply(labeled_data[test_sample,2:5], as.character), stringsAsFactors=FALSE)
View(test_bob)
View(test_bob)
colnames(test_bob) = c( "total_reads",  "aligned_unique",	"Mitochondrial", "Labels")
Prediction <- predict(fit, test_bob[,1:3])
v_bob = cbind(test_bob,Prediction)
all_bob <- data.frame(lapply(labeled_data[,2:5], as.character), stringsAsFactors=FALSE)
Prediction <- predict(fit, all_bob[,1:3])
colnames(all_bob) = c( "total_reads",  "aligned_unique",  "Mitochondrial", "Labels")
Prediction <- predict(fit, all_bob[,1:3])
v_f_bob = cbind(all_bob,Prediction)
cc = sapply(1:336,function(x) (col_ass[which(row.names(col_ass)==v_f_bob[x,5]),2]))
nna2 = apply(v_f_bob[1:3],c(1,2),function(x) as.numeric(x))
pca2 = prcomp(nna2, center=TRUE, scale. = TRUE)
plot(pca2$x[,1],pca2$x[,2],col = as.vector(cc), pch=20, cex=1.5, cex.lab=1.2, xlab = "PC1 (63.35%)", ylab= "PC2 (25.45%)")
legend("topright", fill=as.vector(col_ass[,2]), legend = col_ass[,1], border = FALSE, cex = 0.6)
dev.off()
summary(pca2)
summary(pca1)
d
setwd("Dropbox/backup/Proteo-transcriptome/")
library(shiny)
install.packages("shiny")
install.packages("zoo")
install.packages("DT")
library(shiny)
runApp("PEACHi2_dev/")
runApp("PEACHi2_dev/")
